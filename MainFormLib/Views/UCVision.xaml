<UserControl x:Class="MainFormLib.Views.UCVision"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:local="clr-namespace:MainFormLib.Views"
             xmlns:ccm="clr-namespace:MainFormLib.Models"
        xmlns:model="clr-namespace:MainFormLib.Models"
        xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"    
xmlns:attach="clr-namespace:ControlShareResources.Attach;assembly=ControlShareResources"
xmlns:uc="clr-namespace:ControlShareResources.UserControls;assembly=ControlShareResources"
Background="#ffffff"
Style="{x:Null}" FocusVisualStyle="{x:Null}"
mc:Ignorable="d"  Loaded="Window_Loaded"  Unloaded="UserControl_Unloaded"
Height="700" Width="1000">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/ControlShareResources;component/Control.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="350"/>
        </Grid.ColumnDefinitions>
        <DockPanel Margin="1" >
            <Grid>
                <Rectangle Stroke="#ff6d3c" StrokeThickness="1.5" Margin="0"/>
                <WindowsFormsHost Name="host" Margin="2" >
                    <!--<WindowsFormsHost.Child>
                        <vision:VisionShowTool Dock="Fill" x:Name="{Binding Model.VisionShowToolName}"/>
                    </WindowsFormsHost.Child>-->
                </WindowsFormsHost>
            </Grid>
        </DockPanel>

        <!--<StackPanel Grid.Column="1"  Margin="1">-->
        <Grid Grid.Column="1"  Margin="1">
            <Grid.Resources>
                <model:ComparisonConverter x:Key="ComparisonConverter" />
                <model:EnumConverter x:Key="enumConverter" />
                <model:BoolConverter x:Key="boolConverter" />
                <model:CheckConverter x:Key="checkConverter" />

                <Style TargetType="MenuItem" x:Key="PosMenuItem">
                    <EventSetter Event="Click" Handler="PosMenuItem_Click"/>
                </Style>
                <Style TargetType="MenuItem" x:Key="GlueMenuItem">
                    <EventSetter Event="Click" Handler="GlueMenuItem_Click"/>
                </Style>
            </Grid.Resources>
            <Rectangle Stroke="#ff6d3c"  StrokeThickness="1.5" Margin="0"/>

            <TabControl Style="{DynamicResource TabControlStyle}" Margin="2" >
                <TabItem Style="{DynamicResource TabItemStyle}" Header="面阵相机">
                    <!--<ScrollViewer HorizontalScrollBarVisibility="Auto"
                                  VerticalScrollBarVisibility="Auto">-->

                    <Grid Margin="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!--<Rectangle Stroke="#ff6d3c" StrokeThickness="1"/>-->
                        <GroupBox Style="{DynamicResource GroupBoxStyle}" Grid.Row="0"  Header="相机选择">
                            <Grid>
                                <Label Style="{DynamicResource LabelStyle}" Content="相机型号："
                          HorizontalAlignment="Left" VerticalAlignment="Top" 
                           Margin="10,8,0,0"/>
                                <ComboBox Name="cobxCamTypeList" Style="{DynamicResource MyCbbStyle}" Width="135"
                              HorizontalAlignment="Left" VerticalAlignment="Top"
                              Margin="80,8,0,0"  Height="25"  IsEnabled="{Binding Model.CobxCamTypeEnable}"
                                ItemsSource="{Binding Model.CamTypeList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"                          
  SelectedItem="{Binding Model.SelectCamTypeName,Mode=TwoWay}"
                    SelectedIndex="{Binding Model.SelectCamTypeIndex,Mode=TwoWay}"  >

                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="SelectionChanged">
                                            <behaviors:InvokeCommandAction Command="{Binding CamTypeSelectionChangedCommand}" CommandParameter="{Binding ElementName=cobxCamTypeList,Path=SelectedValue}"/>
                                        </behaviors:EventTrigger>
                                    </behaviors:Interaction.Triggers>
                                </ComboBox>
                                <Button Style="{DynamicResource PrimaryButton}" Height="30" Content="打开相机"
                            HorizontalAlignment="Left" VerticalAlignment="Top"
Margin="230,5,0,0" Width="80"  attach:ButtonAttach.ButtonCornerRadius="3"  IsEnabled="{Binding Model.BtnOpenCamEnable}"
                          Command="{Binding OpenCamButClickCommand}"/>

                                <Label Style="{DynamicResource LabelStyle}" Content="相机索引："
                          HorizontalAlignment="Left" VerticalAlignment="Top" 
                           Margin="10,48,0,0"/>
                                <ComboBox  Style="{DynamicResource MyCbbStyle}" Width="135"
                              HorizontalAlignment="Left" VerticalAlignment="Top"
                              Margin="80,48,0,0"  Height="25"  x:Name="cobxCamIndexerList"
                                ItemsSource="{Binding Model.CamIndexerList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"                          
  SelectedItem="{Binding Model.SelectCamIndexerName,Mode=TwoWay}"  IsEnabled="{Binding Model.CobxCamIndexerEnable }"
                    SelectedIndex="{Binding Model.SelectCamIndexerIndex,Mode=TwoWay}"  >

                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="SelectionChanged">
                                            <behaviors:InvokeCommandAction Command="{Binding CamIndexerSelectionChangedCommand}" CommandParameter="{Binding ElementName=cobxCamIndexerList,Path=SelectedValue}"/>
                                        </behaviors:EventTrigger>
                                    </behaviors:Interaction.Triggers>
                                </ComboBox>
                                <Button Style="{DynamicResource PrimaryButton}" Height="30" Content="关闭相机"
                            HorizontalAlignment="Left" VerticalAlignment="Top"
Margin="230,45,0,0" Width="80"  attach:ButtonAttach.ButtonCornerRadius="3"   IsEnabled="{Binding Model.BtnCloseCamEnable}"
                          Command="{Binding CloseCamButClickCommand}"/>


                            </Grid>
                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle}" Grid.Row="1" 
                                  Header="相机参数"  IsEnabled="{Binding Model.IsCamAlive}">
                            <Grid>
                                <Label Style="{DynamicResource LabelStyle}" Content="曝光(us)："
                          HorizontalAlignment="Left" VerticalAlignment="Top" 
                           Margin="10,8,0,0"/>
                                <Slider  Style="{DynamicResource  sliderStyle}" Width="125"
                              HorizontalAlignment="Left" VerticalAlignment="Top"
                              Margin="80,8,0,0"  Height="25" 
                                         Maximum="{Binding Model.ExpouseMaxValue,Mode=TwoWay}"
                                         Minimum="{Binding Model.ExpouseMinValue,Mode=TwoWay}"
                                         Value="{Binding Model.ExpouseSliderValue,Mode=TwoWay}"
                                 Thumb.DragCompleted ="expouseSlider_DragCompleted" >

                                </Slider>
                                <uc:MyNumUpDown  Height="25" 
                            HorizontalAlignment="Left" VerticalAlignment="Top"
Margin="210,8,0,0" Width="100"   MaxValue="{Binding Model.ExpouseMaxValue,Mode=TwoWay}"
  MinValue="{Binding  Model.ExpouseMinValue,Mode=TwoWay}"
         NumericValue="{Binding Model.ExpouseNumricValue,Mode=TwoWay}"
                   OffsetValue="1000" DecimalPlaces="0"   
                                   ValueChangeAction="{Binding Model.ExpouseNumericCommand}"         >

                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="KeyDown">
                                            <behaviors:InvokeCommandAction Command="{Binding ExpouseNumericKeyDownCommand}"                                                                    
                                        PassEventArgsToCommand="True"/>
                                        </behaviors:EventTrigger>

                                    </behaviors:Interaction.Triggers>

                                </uc:MyNumUpDown>

                                <Label Style="{DynamicResource LabelStyle}" Content="增益(db)："
                          HorizontalAlignment="Left" VerticalAlignment="Top" 
                           Margin="10,45,0,0"/>
                                <Slider  Style="{DynamicResource  sliderStyle}" Width="125"
                              HorizontalAlignment="Left" VerticalAlignment="Top"
                              Margin="80,47,0,0"  Height="25" 
                                          Maximum="{Binding Model.GainMaxValue,Mode=TwoWay}"
 Minimum="{Binding Model.GainMinValue,Mode=TwoWay}"
 Value="{Binding Model.GainSliderValue,Mode=TwoWay}"
                                     Thumb.DragCompleted ="gainSlider_DragCompleted"     >


                                </Slider>
                                <uc:MyNumUpDown  Height="25" 
                            HorizontalAlignment="Left" VerticalAlignment="Top"
Margin="210,45,0,0" Width="100"  
                    MaxValue="{Binding Model.GainMaxValue,Mode=TwoWay}"
  MinValue="{Binding  Model.GainMinValue,Mode=TwoWay}"
         NumericValue="{Binding Model.GainNumricValue,Mode=TwoWay}"             
                      OffsetValue="1" DecimalPlaces="0"                           
                         ValueChangeAction="{Binding Model.GainNumericCommand}"       >

                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="KeyDown">
                                            <behaviors:InvokeCommandAction Command="{Binding GainNumericKeyDownCommand}"                                                                    
      PassEventArgsToCommand="True"/>
                                        </behaviors:EventTrigger>

                                    </behaviors:Interaction.Triggers>


                                </uc:MyNumUpDown>

                            </Grid>
                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle}"   Width="170"
                                     Grid.Row="2"  
                                  HorizontalAlignment="Left" Header="图像采集" >
                            <Grid>
                                <Button Style="{DynamicResource  PrimaryButton}" Content="单帧采集"
                          HorizontalAlignment="Left" VerticalAlignment="Top"  Width="70"
                                            attach:ButtonAttach.ButtonCornerRadius="3"
                           Margin="6,8,0,0" Command="{Binding OneShotBtnClickCommand}" 
                                        IsEnabled="{Binding Model.BtnOneShotEnable}"
                                        />
                                <Button Style="{DynamicResource  PrimaryButton}" Content="连续采集"
HorizontalAlignment="Left" VerticalAlignment="Top"  Width="70"
                  attach:ButtonAttach.ButtonCornerRadius="3" Command="{Binding ContinueGrabBtnClickCommand}" 
 Margin="85,8,0,0"   IsEnabled="{Binding Model.BtnContinueGrabEnable}"/>
                                <Button Style="{DynamicResource  PrimaryButton}" Content="参数保存"
                          HorizontalAlignment="Left" VerticalAlignment="Top"  Width="70"
                                            attach:ButtonAttach.ButtonCornerRadius="3"
                           Margin="6,45,0,0" Command="{Binding SaveCamParamBtnClickCommand}"  />
                                <Button Style="{DynamicResource  PrimaryButton}" Content="停止采集"
HorizontalAlignment="Left" VerticalAlignment="Top"  Width="70"
                  attach:ButtonAttach.ButtonCornerRadius="3" Command="{Binding StopGrabBtnClickCommand}" 
 Margin="85,45,0,0"  IsEnabled="{Binding Model.BtnStopGrabEnable}"/>

                            </Grid>
                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle}"  Width="152"
                                Margin="180,3,3,3"     IsEnabled="{Binding Model.IsCamAlive}"
                                  Grid.Row="2" HorizontalAlignment="Left" Header="自动对焦" >
                            <Grid>
                                <Label Style="{DynamicResource   LabelStyle}" Content="偏差阈值:"
                          HorizontalAlignment="Left" VerticalAlignment="Top"  
                           Margin="-1,8,0,0"/>
                                <uc:MyNumUpDown HorizontalAlignment="Right" VerticalAlignment="Top"
                                                   Width="80" Height="25" Margin="3,8,1,3"
                                                DecimalPlaces="0" DefaultValue="10"
                                                MaxValue="100" MinValue="-100" OffsetValue="10"
                                                NumericValue="{Binding Model.NumDeviationThd,Mode=TwoWay}"
                                                ValueChangeAction="{Binding Model.DeviationThdNumericCommand}"                                     
                                                >
                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="KeyDown">
                                            <behaviors:InvokeCommandAction Command="{Binding NumDeviationThdKeyDownCommand}"                                                                    
       PassEventArgsToCommand="True"/>
                                        </behaviors:EventTrigger>

                                    </behaviors:Interaction.Triggers>


                                </uc:MyNumUpDown>
                                <Label Style="{DynamicResource   LabelStyle}" Content="限位机制:"
HorizontalAlignment="Left" VerticalAlignment="Top"  
 Margin="-1,45,0,0"/>
                                <uc:MyNumUpDown HorizontalAlignment="Right" VerticalAlignment="Top"
                         Width="80" Height="25" Margin="3,45,1,3"
                                                DefaultValue="20" DecimalPlaces="0"
                                                MaxValue="100" MinValue="10"
                                                OffsetValue="10" NumericValue="{Binding Model.NumLimitMethd,Mode=TwoWay}"
                                                 ValueChangeAction="{Binding Model.LimitMethdNumericCommand}"  >

                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="KeyDown">
                                            <behaviors:InvokeCommandAction Command="{Binding NumLimitMethdKeyDownCommand}"                                                                    
PassEventArgsToCommand="True"/>
                                        </behaviors:EventTrigger>

                                    </behaviors:Interaction.Triggers>

                                </uc:MyNumUpDown>
                            </Grid>
                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle}" Grid.Row="3"
                                      Header="测试信息">

                            <RichTextBox    VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" 
     attach:RichTextBoxAttach.RichText="{Binding  Model.RichIfo,Mode=TwoWay}" x:Name="richTxtInfo"
     attach:RichTextBoxAttach.ClearRichText="{Binding  Model.ClearRichText,Mode=TwoWay}">
                                <RichTextBox.Resources>
                                    <Style  TargetType="{x:Type RichTextBox}">
                                        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                                        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                        <Setter Property="Background" Value="#ffffff"/>
                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                                        <Setter Property="Padding" Value="1"/>
                                        <Setter Property="Margin" Value="1"/>
                                        <Setter Property="IsReadOnly" Value="true"/>
                                        <!--<Setter Property="Width" Value="auto"/>
                                        <Setter Property="MinWidth" Value="200"/>-->
                                        <!--<Setter Property="Height" Value="180"/>-->
                                        <Setter Property="SnapsToDevicePixels" Value="True" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RichTextBox}">
                                                    <Grid>
                                                        <Border x:Name="border" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  BorderThickness="0" BorderBrush="#ff6d3c"  Background="{TemplateBinding Background}" >
                                                            <ScrollViewer x:Name="PART_ContentHost"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  HorizontalScrollBarVisibility="Disabled"   VerticalScrollBarVisibility="Visible">

                                                            </ScrollViewer>

                                                        </Border>
                                                    </Grid>

                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="true">
                                                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                                                            <Setter Property="BorderBrush" TargetName="border" Value="#ff6d3c"/>
                                                        </Trigger>

                                                        <Trigger Property="IsEnabled" Value="false">
                                                            <Setter Property="Background" TargetName="border" Value="White"/>
                                                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                                                            <Setter Property="BorderBrush" TargetName="border" Value="gray"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>

                                                </ControlTemplate>

                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </RichTextBox.Resources>
                                <RichTextBox.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="清除" Command="{Binding ClearTextCommand}"/>
                                    </ContextMenu>
                                </RichTextBox.ContextMenu>
                            </RichTextBox>

                        </GroupBox>

                    </Grid>
                    <!--</ScrollViewer>-->
                </TabItem>
                <TabItem Style="{DynamicResource TabItemStyle}" Header="线扫相机"  >
                    <!--<ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                  VerticalScrollBarVisibility="Disabled">-->
                    <Grid Margin="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <GroupBox Grid.Row="0" Header="硬件信息"  Height="250"  Style="{DynamicResource GroupBoxStyle}">
                            <Grid>
                                <Label Style="{DynamicResource LabelStyle}" Content="相机类型："
                                       HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,8"/>
                                <ComboBox Style="{DynamicResource MyCbbStyle}" Height="30" Width="120"
                                          HorizontalAlignment="Left" VerticalAlignment="Top" Margin="85,5,0,0"/>
                                <Button Style="{DynamicResource PrimaryButton}" Content="参数保存"
                                            HorizontalAlignment="Left" VerticalAlignment="Top" Height="30"
                                            Width="80" Margin="225,5,0,0" attach:ButtonAttach.ButtonCornerRadius="3" />
                                <Label Style="{DynamicResource LabelStyle}" Content="相机类型："
             HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,50,0,0"/>
                                <TextBox Style="{DynamicResource baseInput}" HorizontalAlignment="Left"
                                             VerticalAlignment="Top" attach:TexboxAttach.TextBoxCornerRadius="3"
                                             Height="30" Width="220" Margin="85,46,0,0"/>
                                <Label Style="{DynamicResource LabelStyle}" Content="配置文件："
HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,90,0,0"/>
                                <Button  HorizontalAlignment="Left" Width="25" Background="Transparent"
                                            VerticalAlignment="Top" Margin="85,90,0,0" BorderThickness="0"
                                             ToolTip="打开文件">
                                    <Image Source="../images/打开 (2).png"/>
                                </Button>
                                <TextBox Style="{DynamicResource baseInput}" HorizontalAlignment="Left"
                                             VerticalAlignment="Top" Margin="85,117,0,0" TextWrapping="Wrap"
                                             Width="220" Height="100" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                             ScrollViewer.VerticalScrollBarVisibility="auto" HorizontalContentAlignment="Left"
                                             VerticalContentAlignment="Top"/>

                            </Grid>

                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle}" Grid.Row="1" Height="110"  Header="参数设置" >
                            <Grid>
                                <Label Style="{DynamicResource LabelStyle}" Content="曝光(us)："
                          HorizontalAlignment="Left" VerticalAlignment="Top" 
                           Margin="10,8,0,0"/>
                                <uc:MyNumUpDown  Width="135"
                              HorizontalAlignment="Left" VerticalAlignment="Top"
                              Margin="80,5,0,0"  Height="30" 
                                 >

                                </uc:MyNumUpDown>
                                <TextBox  Height="30" Style="{DynamicResource baseInput}"
                                              attach:TexboxAttach.TextBoxCornerRadius="3"
                            HorizontalAlignment="Left" VerticalAlignment="Top"
Margin="230,5,0,0" Width="80"  attach:ButtonAttach.ButtonCornerRadius="3" />

                                <Label Style="{DynamicResource LabelStyle}" Content="增益(db)："
                          HorizontalAlignment="Left" VerticalAlignment="Top" 
                           Margin="10,48,0,0"/>
                                <uc:MyNumUpDown  Width="135"
                              HorizontalAlignment="Left" VerticalAlignment="Top"
                              Margin="80,45,0,0"  Height="30" >


                                </uc:MyNumUpDown>
                                <TextBox Style="{DynamicResource  baseInput}" Height="30" 
                            HorizontalAlignment="Left" VerticalAlignment="Top"
                                             attach:TexboxAttach.TextBoxCornerRadius="3"
Margin="230,45,0,0" Width="80"  attach:ButtonAttach.ButtonCornerRadius="3" />

                            </Grid>
                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle}" Grid.Row="2" Height="90"   Header="采集操作" >

                            <Grid>
                                <Button Style="{DynamicResource  PrimaryButton}" Content="Grab"
                          HorizontalAlignment="Left" VerticalAlignment="Top"  Height="30"
                           Margin="20,15,0,0" attach:ButtonAttach.ButtonCornerRadius="3" Width="100"/>

                                <Button Style="{DynamicResource  PrimaryButton}" Content="SnapShot"
HorizontalAlignment="Left" VerticalAlignment="Top"  Height="30"
 Margin="200,15,0,0" attach:ButtonAttach.ButtonCornerRadius="3" Width="100"/>
                            </Grid>
                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle}" Grid.Row="3"   Header="测试信息" >

                            <RichTextBox  VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled"               
>
                                <RichTextBox.Resources>
                                    <Style  TargetType="{x:Type RichTextBox}">
                                        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                                        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                        <Setter Property="Background" Value="#ffffff"/>
                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                                        <Setter Property="Padding" Value="1"/>
                                        <Setter Property="Margin" Value="1"/>
                                        <Setter Property="IsReadOnly" Value="true"/>
                                        <!--<Setter Property="Width" Value="auto"/>
                                   <Setter Property="MinWidth" Value="200"/>-->
                                        <!--<Setter Property="Height" Value="180"/>-->
                                        <Setter Property="SnapsToDevicePixels" Value="True" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RichTextBox}">
                                                    <Grid>
                                                        <Border x:Name="border" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  BorderThickness="0" BorderBrush="#ff6d3c"  Background="{TemplateBinding Background}" >
                                                            <ScrollViewer x:Name="PART_ContentHost"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  HorizontalScrollBarVisibility="Disabled"   VerticalScrollBarVisibility="Visible">

                                                            </ScrollViewer>

                                                        </Border>
                                                    </Grid>

                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="true">
                                                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                                                            <Setter Property="BorderBrush" TargetName="border" Value="#ff6d3c"/>
                                                        </Trigger>

                                                        <Trigger Property="IsEnabled" Value="false">
                                                            <Setter Property="Background" TargetName="border" Value="White"/>
                                                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                                                            <Setter Property="BorderBrush" TargetName="border" Value="gray"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>

                                                </ControlTemplate>

                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </RichTextBox.Resources>
                                <RichTextBox.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="清除" Command="{Binding ClearTextCommand}"/>
                                    </ContextMenu>
                                </RichTextBox.ContextMenu>
                            </RichTextBox>
                        </GroupBox>


                    </Grid>
                    <!--</ScrollViewer>-->
                </TabItem>
                <TabItem Style="{DynamicResource TabItemStyle}" Header="定位检测">
                    <ScrollViewer HorizontalScrollBarVisibility="Auto"
                         VerticalScrollBarVisibility="Auto" >
                        <Grid Margin="1" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Expander  Grid.Row="0" Style="{DynamicResource ExpanderStyle}" IsExpanded="False"    
            attach:ButtonAttach.ButtonCornerRadius="5" Header="辅助工具(单位：mm)">
                                <Expander.Content>
                                    <Grid>
                                        <Rectangle Stroke="#ff6d3c" StrokeThickness="1"/>
                                        <RadioButton Style="{DynamicResource RadioButtonStyleBasics}"
                                                     Content="圆:" HorizontalAlignment="Left" VerticalAlignment="Top"
                                                     Margin="5,15,0,0"
                                                     IsEnabled="{Binding Model.ShowCross}"
                           Command="{Binding RdbtnCheckedChangedCommand}"
CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}}"
                                                      IsChecked="{Binding Model.AssistTool ,  Mode=TwoWay, Converter={StaticResource checkConverter}, ConverterParameter={x:Static ccm:EumAssistTool.Circle }}"  />
                                        <uc:MyNumUpDown HorizontalAlignment="Left" VerticalAlignment="Top"
                                                        Margin="70,10,0,0" Height="25" Width="80"
                                                        MaxValue="100" MinValue="0.01"
                                                        DecimalPlaces="2" OffsetValue="1"
                                                        DefaultValue="1.00"
                                                        NumericValue="{Binding Model.AssistCircleRadius,Mode=TwoWay}"
                                                           ValueChangeAction="{Binding Model.AssistCircleCommand}"                         
                                                         IsEnabled="{Binding Model.AssistTool ,  Mode=TwoWay, Converter={StaticResource checkConverter}, ConverterParameter={x:Static ccm:EumAssistTool.Circle }}" >

                                            <behaviors:Interaction.Triggers>
                                                <behaviors:EventTrigger EventName="KeyDown">
                                                    <behaviors:InvokeCommandAction Command="{Binding AssistCircleKeyDownCommand}"                                                                    
                                        PassEventArgsToCommand="True"/>
                                                </behaviors:EventTrigger>

                                            </behaviors:Interaction.Triggers>

                                        </uc:MyNumUpDown>
                                        <RadioButton Style="{DynamicResource RadioButtonStyleBasics}"
              Content="矩形:" HorizontalAlignment="Left" VerticalAlignment="Top"    IsEnabled="{Binding Model.ShowCross}"
                                                   Command="{Binding RdbtnCheckedChangedCommand}"
CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}}"
              Margin="187,15,0,0"   IsChecked="{Binding Model.AssistTool ,  Mode=TwoWay, Converter={StaticResource checkConverter}, ConverterParameter={x:Static ccm:EumAssistTool.Rectangle }}" />
                                        <uc:MyNumUpDown HorizontalAlignment="Left" VerticalAlignment="Top"
                 Margin="242,10,0,0" Height="25" Width="80"
                              MaxValue="100" MinValue="0.01"
 DecimalPlaces="2" OffsetValue="1"
 DefaultValue="1.00"
 NumericValue="{Binding Model.AssistRectWidth,Mode=TwoWay}"
                                                        ValueChangeAction="{Binding Model.AssistCircleCommand}"
                                                         IsEnabled="{Binding Model.AssistTool ,  Mode=TwoWay, Converter={StaticResource checkConverter}, ConverterParameter={x:Static ccm:EumAssistTool.Rectangle }}" >
                                            <behaviors:Interaction.Triggers>
                                                <behaviors:EventTrigger EventName="KeyDown">
                                                    <behaviors:InvokeCommandAction Command="{Binding AssistCircleKeyDownCommand}"                                                                    
PassEventArgsToCommand="True"/>
                                                </behaviors:EventTrigger>

                                            </behaviors:Interaction.Triggers>




                                        </uc:MyNumUpDown>

                                        <CheckBox Style="{DynamicResource  CheckBoxBasic}" HorizontalAlignment="Left"
                                               VerticalAlignment="Top" Margin="5,45,0,10" Content="刻度尺:"
                                               IsEnabled="{Binding Model.ShowCross}" Command="{Binding ScaleRuleCheckChangeCommand}"
                                                  IsChecked="{Binding Model.ShowScaleRule,Mode=TwoWay}"/>
                                        <uc:MyNumUpDown HorizontalAlignment="Left" VerticalAlignment="Top"
                  Margin="70,40,0,0" Height="25" Width="80"
                          MaxValue="10" MinValue="0.01"
DecimalPlaces="1" OffsetValue="0.1"
DefaultValue="1.0"   IsEnabled="{Binding Model.ShowScaleRule}"
NumericValue="{Binding Model.NumOfScale,Mode=TwoWay}"              
                                             ValueChangeAction="{Binding Model.AssistCircleCommand}"             >

                                            <behaviors:Interaction.Triggers>
                                                <behaviors:EventTrigger EventName="KeyDown">
                                                    <behaviors:InvokeCommandAction Command="{Binding AssistCircleKeyDownCommand}"                                                                    
PassEventArgsToCommand="True"/>
                                                </behaviors:EventTrigger>

                                            </behaviors:Interaction.Triggers>
                                        </uc:MyNumUpDown>

                                        <RadioButton Style="{DynamicResource RadioButtonStyleBasics}"
              Content="None" HorizontalAlignment="Left" VerticalAlignment="Top"
                                                   Command="{Binding RdbtnCheckedChangedCommand}"
CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}}"  IsEnabled="{Binding Model.ShowCross}"
              Margin="187,45,0,0"   IsChecked="{Binding Model.AssistTool ,  Mode=TwoWay, Converter={StaticResource checkConverter}, ConverterParameter={x:Static ccm:EumAssistTool.None }}" />
                                      
                                    </Grid>

                                </Expander.Content>
                            </Expander>
                            <Grid Grid.Row="1">
                                <Label Style="{DynamicResource  LabelStyle}" Content="模板类型：" VerticalAlignment="Top" Margin="3,7,0,0"/>
                                <ComboBox Style="{DynamicResource MyCbbStyle}" HorizontalAlignment="Center"
           VerticalAlignment="Top" Width="160" Height="25" Margin="0,7,0,0" 
                                  IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"        
                                          ItemsSource="{Binding Model.ModelTypeList,                                            
                                    UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                                          SelectedItem="{ Binding Model.ModelTypeSelectName,Mode=TwoWay}" x:Name="cobxModelTypeList"
                                          SelectedIndex="{Binding Model.ModelTypeSelectIndex,Mode=TwoWay}">
                                    <!--<ComboBoxItem Content="ProductModel_1"/>
                                    <ComboBoxItem Content="ProductModel_2"/>
                                    <ComboBoxItem Content="CaliBoardModel"/>
                                    <ComboBoxItem Content="GluetapModel"/>-->
                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="SelectionChanged">
                                            <behaviors:InvokeCommandAction Command="{Binding ModelTypeSelectionChangedCommand}" CommandParameter="{Binding ElementName=cobxModelTypeList,Path=SelectedValue}"/>
                                        </behaviors:EventTrigger>
                                    </behaviors:Interaction.Triggers>
                                </ComboBox>
                                <Button   Background="Transparent" BorderBrush="#ff6d3c" BorderThickness="1"  HorizontalAlignment="Left"
           VerticalAlignment="Top" Width="28" Height="28" Margin="280,5,0,0"  ToolTip="九点标定"
                                      Command="{Binding NinePointsCalibFormClickCommand}"
                                          Visibility="{Binding Model.ModelType,  Mode=OneWay, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static model:EumModelType.CaliBoardModel}}"   
                                        IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"
                                          >
                                    <Button.Content>
                                        <Image Source="../imgs/点点点.png"/>
                                    </Button.Content>
                                </Button>

                                <GroupBox Style="{DynamicResource GroupBoxStyle}" Header="检测流程"  Margin="0,40,0,0"   >
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="auto"/>
                                            <RowDefinition Height="auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <ToolBarTray Height="35"  Grid.Row="0"  Margin="1"
                                                     IsEnabled="{Binding Model.PosToolBarEnable}">
                                            <ToolBarTray.Style>
                                                <Style TargetType="ToolBarTray">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled"  Value="False">
                                                            <Setter Property="Background" Value="#dddddd"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ToolBarTray.Style>

                                            <ToolBar Height="35" Band="0" BandIndex="0" Background="Transparent" Padding="0">
                                                <Button Margin="2" Background="Transparent"  
                                                        Command="{Binding PosToolBarBtnClickCommand}"                         
                                                       CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                                        ToolTip="打开流程" IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}">
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Style.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/打开文件.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="True">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/打开项目.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                                <Button Margin="2" Background="Transparent"  
                                                          Command="{Binding PosToolBarBtnClickCommand}"                         
 CommandParameter="{Binding RelativeSource={RelativeSource Self}}" ToolTip="保存流程" IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}">
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Style.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/保存 (1).png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="True">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/保存项目.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                                <Button Margin="2" Background="Transparent"  
                                                          Command="{Binding PosToolBarBtnClickCommand}"                         
 CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                                        ToolTip="运行流程" IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}">
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Style.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/试运行 (2).png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="True">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/试运行.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                                <Button Margin="2" Background="Transparent"   
                                                          Command="{Binding PosToolBarBtnClickCommand}"                         
 CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                                        ToolTip="清空流程" IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}">
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Style.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/清空.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="True">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/清空_清空.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                                <Button Margin="2" Background="Transparent"  
                                                          Command="{Binding PosToolBarBtnClickCommand}"                         
 CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                                        ToolTip="标定助手" IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}" >
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Style.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/指标定义.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="True">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/标定助手.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                                <Button Margin="2" Background="Transparent"  
                                                         Command="{Binding PosToolBarBtnClickCommand}"                         
CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                                       ToolTip="通讯管理"  IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}">
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Style.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/通讯 (2).png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="True">
                                                                    <Setter Property="Content" >
                                                                        <Setter.Value>
                                                                            <Image Source="../imgs/通讯.png"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>


                                            </ToolBar>
                                        </ToolBarTray>
                                        <Menu Grid.Row="1"   Margin="1" 
                                              Style="{DynamicResource WD.DefaultMenu}"
                                               IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}">
                                            <MenuItem Header="前处理"  Margin="0,3"
                                         IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"             
                                                      Style="{DynamicResource WD.DefaultMenuItem}" >
                                                <MenuItem Header="颜色转换" Style="{DynamicResource WD.DefaultMenuItem}"
                                                          Command="{Binding PosMenuClickCommand}"
                                                          CommandParameter="颜色转换" />
                                                <MenuItem Header="膨胀" Style="{DynamicResource WD.DefaultMenuItem}"
                                                          Command="{Binding PosMenuClickCommand}"
                                                          CommandParameter="膨胀"/>
                                                <MenuItem Header="腐蚀" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="腐蚀"/>
                                                <MenuItem Header="开运算" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="开运算"/>
                                                <MenuItem Header="闭运算" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="闭运算"/>
                                                <MenuItem Header="二值化" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="二值化"/>
                                            </MenuItem>
                                            <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                            <MenuItem Header="定位"  Margin="0,3" 
                                                 IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"     
                                                      Style="{DynamicResource WD.DefaultMenuItem}">
                                                <MenuItem Header="模板匹配" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="模板匹配"/>
                                                <MenuItem Header="直线" Style="{DynamicResource WD.DefaultMenuItem}">
                                                    <MenuItem Header="查找直线" Style="{DynamicResource WD.DefaultMenuItem}"
                                                                Command="{Binding PosMenuClickCommand}"
                                                                CommandParameter="查找直线"/>
                                                    <MenuItem Header="拟合直线" Style="{DynamicResource WD.DefaultMenuItem}"
                                                               Command="{Binding PosMenuClickCommand}"
                                                               CommandParameter="拟合直线"/>
                                                    <MenuItem Header="直线偏移" Style="{DynamicResource WD.DefaultMenuItem}"
                                                                Command="{Binding PosMenuClickCommand}"
                                                                CommandParameter="直线偏移"/>
                                                    <MenuItem Header="平行直线" Style="{DynamicResource WD.DefaultMenuItem}"
                                                                 Command="{Binding PosMenuClickCommand}"
                                                                 CommandParameter="平行直线"/>
                                                    <MenuItem Header="直线中心" Style="{DynamicResource WD.DefaultMenuItem}"
                                                               Command="{Binding PosMenuClickCommand}"
                                                               CommandParameter="直线中心"/>
                                                    <MenuItem Header="直线交点" Style="{DynamicResource WD.DefaultMenuItem}"
                                                               Command="{Binding PosMenuClickCommand}"
                                                               CommandParameter="直线交点"/>
                                                </MenuItem>
                                                <MenuItem Header="查找圆" Style="{DynamicResource WD.DefaultMenuItem}"
                                                          Command="{Binding PosMenuClickCommand}"
                                                          CommandParameter="查找圆"/>
                                                <MenuItem Header="Blob中心" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                            CommandParameter="Blob中心"/>

                                            </MenuItem>
                                            <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                            <MenuItem Header="映射"  Margin="0,3" 
                                                   IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"   
                                                      Style="{DynamicResource WD.DefaultMenuItem}">
                                                <MenuItem Header="坐标换算" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="坐标换算"/>
                                                <MenuItem Header="角度换算" Style="{DynamicResource WD.DefaultMenuItem}"
                                                          Command="{Binding PosMenuClickCommand}"
                                                          CommandParameter="角度换算"/>
                                                <MenuItem Header="畸变校正" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="畸变校正"/>

                                            </MenuItem>
                                            <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                            <MenuItem Header="几何距离"  Margin="0,3" 
                                                IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"      
                                                      Style="{DynamicResource WD.DefaultMenuItem}">
                                                <MenuItem Header="点点距离" Style="{DynamicResource WD.DefaultMenuItem}"
                                                           Command="{Binding PosMenuClickCommand}"
                                                           CommandParameter="点点距离"/>
                                                <MenuItem Header="点线距离" Style="{DynamicResource WD.DefaultMenuItem}"
                                                            Command="{Binding PosMenuClickCommand}"
                                                            CommandParameter="点线距离"/>
                                                <MenuItem Header="线线距离" Style="{DynamicResource WD.DefaultMenuItem}"
                                                            Command="{Binding PosMenuClickCommand}"
                                                            CommandParameter="线线距离"/>
                                            </MenuItem>
                                            <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                            <MenuItem Header="轨迹提取"  Margin="0,3" 
                                                IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"      
                                                      Style="{DynamicResource WD.DefaultMenuItem}"
                                                       Command="{Binding PosMenuClickCommand}"
                                                       CommandParameter="轨迹提取">

                                            </MenuItem>
                                            <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                            <MenuItem Header="结果显示"  Margin="0,3" 
                                                      IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"
                                                      Style="{DynamicResource WD.DefaultMenuItem}"
                                                       Command="{Binding PosMenuClickCommand}"
                                                       CommandParameter="结果显示">

                                            </MenuItem>
                                            <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                            <MenuItem Header="通讯"  Margin="0,3" 
                                              IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"        
                                                      Style="{DynamicResource WD.DefaultMenuItem}">
                                                <MenuItem Header="Tcp接收" Style="{DynamicResource WD.DefaultMenuItem}"
             Command="{Binding PosMenuClickCommand}"
             CommandParameter="Tcp接收"/>
                                                <MenuItem Header="Tcp发送" Style="{DynamicResource WD.DefaultMenuItem}"
              Command="{Binding PosMenuClickCommand}"
              CommandParameter="Tcp发送"/>
                                            </MenuItem>

                                        </Menu>
                                        <ListView Grid.Row="2"  Margin="1" 
                                             Style="{DynamicResource ListViewStyle}" 
                                                  IsEnabled="{Binding Model.PosListViewEnable}"
                                                  x:Name="listViewToolsOfPosition"  
                                                  SelectedIndex="{Binding Model.ToolsOfPositionSelectIndex,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                 ItemsSource="{Binding Model.ToolsOfPositionList,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"   >

                                            <ListView.View>
                                                <GridView>
                                                    <GridViewColumn Header="序号" Width="40" DisplayMemberBinding="{Binding Path=ID}"/>
                                                    <GridViewColumn Header="工具名称" Width="120" DisplayMemberBinding="{Binding Path=ToolName}"/>
                                                    <GridViewColumn Header="状态" Width="40" DisplayMemberBinding="{Binding Path=ToolStatus}"/>
                                                    <GridViewColumn Header="工具备注" Width="120" DisplayMemberBinding="{Binding Path=ToolNotes}"/>
                                                </GridView>
                                            </ListView.View>
                                            <ListView.ItemContainerStyle>
                                                <Style TargetType="ListViewItem">
                                                    <Setter Property="ContextMenu">
                                                        <Setter.Value>

                                                            <ContextMenu  Visibility="{Binding ContextMenuVisib}">

                                                                <MenuItem Header="上移"  Style="{DynamicResource PosMenuItem}"
                                 IsEnabled= "{Binding MenuItemEnable,   Converter={StaticResource enumConverter}, ConverterParameter={x:Static model:EumMenuItemEnable.first}}"    >
                                                                    <MenuItem.Icon>
                                                                        <Image Source="../images/上移.ico" />
                                                                    </MenuItem.Icon>
                                                                </MenuItem>
                                                                <MenuItem Header="下移"   Style="{DynamicResource PosMenuItem}"
                                 IsEnabled= "{Binding MenuItemEnable,  Converter={StaticResource enumConverter}, ConverterParameter={x:Static model:EumMenuItemEnable.last}}"   
                                                                         >
                                                                    <MenuItem.Icon>
                                                                        <Image Source="../images/下移.ico"/>
                                                                    </MenuItem.Icon>
                                                                </MenuItem>
                                                                <MenuItem Header="删除" Style="{DynamicResource PosMenuItem}"  >
                                                                    <MenuItem.Icon>
                                                                        <Image Source="../images/删除.png"/>
                                                                    </MenuItem.Icon>
                                                                </MenuItem>
                                                                <MenuItem Header="修改备注" Style="{DynamicResource PosMenuItem}">

                                                                    <MenuItem.Icon>
                                                                        <Image Source="../images/备注 (1).png"/>
                                                                    </MenuItem.Icon>
                                                                </MenuItem>


                                                            </ContextMenu>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <EventSetter Event="MouseDoubleClick" Handler="PosListViewItem__MouseDoubleClick"/>
                                                    <EventSetter Event="MouseUp" Handler="PosListViewItem_MouseUp"/>
                                                    <Setter Property="Background" Value="#ffffff"/>
                                                    <Setter Property="Foreground"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="true">
                                                            <Setter Property="Background" Value="#dddddd"/>
                                                        </Trigger>
                                                        <Trigger Property="IsSelected" Value="true">
                                                            <Setter Property="Background" Value="#ff6d3c"/>
                                                            <Setter Property="Foreground" Value="#ffffff"/>
                                                        </Trigger>
                                                        <DataTrigger Binding="{Binding ToolStatus}"  Value="OK">
                                                            <Setter Property="Foreground" Value="Green"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding ToolStatus}" Value="NG">
                                                            <Setter Property="Foreground" Value="Red"/>
                                                        </DataTrigger>

                                                    </Style.Triggers>



                                                </Style>
                                            </ListView.ItemContainerStyle>
                                            <!--<behaviors:Interaction.Triggers>
                                                <behaviors:EventTrigger EventName="MouseDoubleClick">
                                                    <behaviors:InvokeCommandAction Command="{Binding ToolsOfPosDoubleClickCommand}" CommandParameter="{Binding ElementName=listViewToolsOfPosition,Path=SelectedValue}"/>
                                                </behaviors:EventTrigger>
                                                <behaviors:EventTrigger EventName="MouseDown">
                                                    <behaviors:InvokeCommandAction Command="{Binding ToolsOfPosMouseDownCommand}" CommandParameter="{Binding ElementName=listViewToolsOfPosition,Path=SelectedValue}"/>
                                                </behaviors:EventTrigger>
                                            </behaviors:Interaction.Triggers>-->

                                        </ListView>

                                    </Grid>
                                </GroupBox>
                            </Grid>

                        </Grid>
                    </ScrollViewer>
                </TabItem>
                <TabItem Style="{DynamicResource TabItemStyle}" Header="胶水AOI">
                    <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                 VerticalScrollBarVisibility="Auto" >

                        <GroupBox  Style="{DynamicResource GroupBoxStyle}" Header="检测流程" >
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <ToolBarTray Height="35" Grid.Row="0" Margin="1"  IsEnabled="{Binding Model.GlueToolBarEnable}">
                                    <ToolBar Height="35" Band="0" BandIndex="0" Background="Transparent" Padding="0">
                                        <Button Margin="2" Background="Transparent"   ToolTip="打开流程"
                                                 IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"
                                                Command="{Binding GlueToolBarBtnClickCommand}"                                               
  CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                                            <Button.Style>
                                                <Style TargetType="Button">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/打开文件.png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="True">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/打开项目.png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                        <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                        <Button Margin="2" Background="Transparent"   ToolTip="保存流程"
                                                IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"
                                                Command="{Binding GlueToolBarBtnClickCommand}"                         
CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                                            <Button.Style>
                                                <Style TargetType="Button">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/保存 (1).png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="True">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/保存项目.png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                        <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                        <Button Margin="2" Background="Transparent"   ToolTip="运行流程"
     IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"
                                                Command="{Binding GlueToolBarBtnClickCommand}"                         
CommandParameter="{Binding RelativeSource={RelativeSource Self}}"            >
                                            <Button.Style>
                                                <Style TargetType="Button">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/试运行 (2).png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="True">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/试运行.png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                        <Separator BorderBrush="#ff6d3c" BorderThickness="1"/>
                                        <Button Margin="2" Background="Transparent"   ToolTip="清空流程" Cursor=""
                              IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"
                                                Command="{Binding GlueToolBarBtnClickCommand}"                         
CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                                            <Button.Style>
                                                <Style TargetType="Button">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/清空.png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="True">
                                                            <Setter Property="Content" >
                                                                <Setter.Value>
                                                                    <Image Source="../imgs/清空_清空.png"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                    </ToolBar>
                                </ToolBarTray>
                                <Menu Grid.Row="1" Margin="1" 
                                       Style="{DynamicResource WD.DefaultMenu}" 
                                       IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}">
                                    <MenuItem Header="图像前处理"  Margin="0,3" Style="{DynamicResource WD.DefaultMenuItem}" >
                                        <MenuItem Header="颜色转换" Style="{DynamicResource WD.DefaultMenuItem}"
                                                     Command="{Binding GlueMenuClickCommand}"
   CommandParameter="颜色转换"/>
                                        <MenuItem Header="膨胀" Style="{DynamicResource WD.DefaultMenuItem}"
                                                     Command="{Binding GlueMenuClickCommand}"
   CommandParameter="膨胀"/>
                                        <MenuItem Header="腐蚀" Style="{DynamicResource WD.DefaultMenuItem}"
                                           Command="{Binding GlueMenuClickCommand}"
CommandParameter="腐蚀" />
                                        <MenuItem Header="开运算" Style="{DynamicResource WD.DefaultMenuItem}"
                                           Command="{Binding GlueMenuClickCommand}"
CommandParameter="开运算"                                                 />
                                        <MenuItem Header="闭运算" Style="{DynamicResource WD.DefaultMenuItem}"
                                           Command="{Binding GlueMenuClickCommand}"
CommandParameter="闭运算"                                                  />
                                        <MenuItem Header="二值化" Style="{DynamicResource WD.DefaultMenuItem}"
                                            Command="{Binding GlueMenuClickCommand}"
CommandParameter="二值化"                                                 />
                                    </MenuItem>
                                    <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                    <MenuItem Header="定位识别"  Margin="0,3" Style="{DynamicResource WD.DefaultMenuItem}">
                                        <MenuItem Header="模板匹配" Style="{DynamicResource WD.DefaultMenuItem}"
                                             Command="{Binding GlueMenuClickCommand}"
CommandParameter="模板匹配"                                                 />
                                    </MenuItem>
                                    <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                    <MenuItem Header="胶水检测"  Margin="0,3" Style="{DynamicResource WD.DefaultMenuItem}">
                                        <MenuItem Header="漏胶" Style="{DynamicResource WD.DefaultMenuItem}"
                                              Command="{Binding GlueMenuClickCommand}"
CommandParameter="漏胶"                                                 />
                                        <MenuItem Header="偏位" Style="{DynamicResource WD.DefaultMenuItem}"
                                               Command="{Binding GlueMenuClickCommand}"
CommandParameter="偏位"                                                 />
                                        <MenuItem Header="断胶" Style="{DynamicResource WD.DefaultMenuItem}"
                                                Command="{Binding GlueMenuClickCommand}"
CommandParameter="断胶"                                                  />
                                        <MenuItem Header="胶宽" Style="{DynamicResource WD.DefaultMenuItem}"
                                                Command="{Binding GlueMenuClickCommand}"
CommandParameter="胶宽"                                                  />
                                    </MenuItem>
                                    <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                    <MenuItem Header="结果显示"  Margin="0,3" Style="{DynamicResource WD.DefaultMenuItem}"
                            Command="{Binding GlueMenuClickCommand}"
CommandParameter="结果显示" />
                                    <Separator  Style="{DynamicResource WD.SeparatorStyleKey}"/>
                                    <MenuItem Header="通讯"  Margin="0,3" 
                                 IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"        
                                         Style="{DynamicResource WD.DefaultMenuItem}">
                                        <MenuItem Header="Tcp接收" Style="{DynamicResource WD.DefaultMenuItem}"
Command="{Binding GlueMenuClickCommand}"
CommandParameter="Tcp接收"/>
                                        <MenuItem Header="Tcp发送" Style="{DynamicResource WD.DefaultMenuItem}"
 Command="{Binding GlueMenuClickCommand}"
 CommandParameter="Tcp发送"/>
                                    </MenuItem>

                                </Menu>
                                <ListView  Grid.Row="2"
                                        Style="{DynamicResource ListViewStyle}" 
                                             IsEnabled="{Binding Model.GlueListViewEnable}"
                                            x:Name="listViewToolsOfGlue"  
 SelectedIndex="{Binding Model.ToolsOfGlueSelectIndex,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
ItemsSource="{Binding Model.ToolsOfGlueList,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" >

                                    <ListView.View>
                                        <GridView>
                                            <GridViewColumn Header="序号" Width="40" DisplayMemberBinding="{Binding Path=ID}"/>
                                            <GridViewColumn Header="工具名称" Width="120" DisplayMemberBinding="{Binding Path=ToolName}"/>
                                            <GridViewColumn Header="状态" Width="40" DisplayMemberBinding="{Binding Path=ToolStatus}"/>
                                            <GridViewColumn Header="工具备注" Width="120" DisplayMemberBinding="{Binding Path=ToolNotes}"/>
                                        </GridView>
                                    </ListView.View>
                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="ListViewItem">
                                            <Setter Property="ContextMenu">
                                                <Setter.Value>
                                                    <ContextMenu  >

                                                        <MenuItem Header="上移"  Style="{DynamicResource GlueMenuItem}"
IsEnabled= "{Binding MenuItemEnable,   Converter={StaticResource enumConverter}, ConverterParameter={x:Static model:EumMenuItemEnable.first}}"    >
                                                            <MenuItem.Icon>
                                                                <Image Source="../images/上移.ico" />
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                        <MenuItem Header="下移"   Style="{DynamicResource GlueMenuItem}"
IsEnabled= "{Binding MenuItemEnable,  Converter={StaticResource enumConverter}, ConverterParameter={x:Static model:EumMenuItemEnable.last}}"   
                                        >
                                                            <MenuItem.Icon>
                                                                <Image Source="../images/下移.ico"/>
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                        <MenuItem Header="删除" Style="{DynamicResource GlueMenuItem}"  >
                                                            <MenuItem.Icon>
                                                                <Image Source="../images/删除.png"/>
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                        <MenuItem Header="修改备注" Style="{DynamicResource GlueMenuItem}">

                                                            <MenuItem.Icon>
                                                                <Image Source="../images/备注 (1).png"/>
                                                            </MenuItem.Icon>
                                                        </MenuItem>


                                                    </ContextMenu>
                                                </Setter.Value>
                                            </Setter>
                                            <EventSetter Event="MouseDoubleClick" Handler="GlueListViewItem__MouseDoubleClick"/>
                                            <EventSetter Event="MouseUp" Handler="GlueListViewItem_MouseUp"/>
                                            <Setter Property="Background" Value="#ffffff"/>
                                            <Setter Property="Foreground"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="true">
                                                    <Setter Property="Background" Value="#dddddd"/>
                                                </Trigger>
                                                <Trigger Property="IsSelected" Value="true">
                                                    <Setter Property="Background" Value="#ff6d3c"/>
                                                    <Setter Property="Foreground" Value="#ffffff"/>
                                                </Trigger>
                                                <DataTrigger Binding="{Binding ToolStatus}"  Value="OK">
                                                    <Setter Property="Foreground" Value="Green"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ToolStatus}" Value="NG">
                                                    <Setter Property="Foreground" Value="Red"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                </ListView>
                            </Grid>

                        </GroupBox>

                    </ScrollViewer>
                </TabItem>
                <TabItem Style="{DynamicResource TabItemStyle}"
                          
                         Header="配方设置">
                    <ScrollViewer HorizontalScrollBarVisibility="Auto"
                     VerticalScrollBarVisibility="Auto">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="40"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <ToolBarTray x:Name="tb" Grid.Row="0" Margin="1"  IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}" >
                                <ToolBarTray.Style>
                                    <Style TargetType="ToolBarTray">
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled"  Value="False">
                                                <Setter Property="Background" Value="#dddddd"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToolBarTray.Style>

                                <ToolBar Band="0" BandIndex="0" Background="Transparent" Height="40" >
                                    <attach:RichButton   Icon="../imgs/新建.png" Foreground="#ff6d3c"
                    Content="新建" Margin="2" Background="Transparent" 
                       BorderBrush="#ff6d3c"   BorderThickness="0"        
                       Width="55"    Orientation="Horizontal" Command="{Binding NewRecipeClickCommand}">

                                    </attach:RichButton>
                                    <Separator Background="Gray" BorderBrush="#ff6d3c" BorderThickness="1"/>
                                    <attach:RichButton   Icon="../imgs/删除.png" Foreground="#ff6d3c"
     Content="删除" Margin="2" Background="Transparent" Command="{Binding DeleteRecipeClickCommand}"
        BorderBrush="#ff6d3c"   BorderThickness="0"        
        Width="55"    Orientation="Horizontal" Cursor="Hand">

                                    </attach:RichButton>
                                    <Separator Background="Gray" BorderBrush="#ff6d3c" BorderThickness="1"/>
                                    <attach:RichButton   Icon="../imgs/保存.png" Foreground="#ff6d3c"
     Content="保存" Margin="2" Background="Transparent" Command="{Binding SaveRecpeClickCommand}"
        BorderBrush="#ff6d3c"   BorderThickness="0"        
        Width="55"    Orientation="Horizontal">

                                    </attach:RichButton>

                                </ToolBar>
                            

                            </ToolBarTray>

                            <DataGrid  Grid.Row="1" Margin="3,5"   Background="#ffffff" 
        VerticalGridLinesBrush="#dddddd"   BorderThickness="1.5" BorderBrush="#ff6d3c"
        Style="{DynamicResource datagrid}"  IsReadOnly="False" 
                                       IsEnabled="{Binding  Model.ContinueRunFlag, Converter={StaticResource boolConverter}}"
                                     SelectedIndex="{Binding Model.RecipeDgSelectIndex,Mode=TwoWay}"  
                                       ItemsSource="{Binding Model.RecipeDgList ,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" >
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="配方名称" Binding="{Binding Name,UpdateSourceTrigger=PropertyChanged,  Mode=TwoWay}" Width="165" ElementStyle="{StaticResource datagridtextblock}"/>
                                    <DataGridCheckBoxColumn Header="启用"  Binding="{Binding IsUse,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Width="165" ElementStyle="{StaticResource datagridcheckbox}"/>
                                </DataGrid.Columns>

                            </DataGrid>

                        </Grid>
                    </ScrollViewer>
                </TabItem>
            </TabControl>


        </Grid>
        <!--</StackPanel>-->
    </Grid>
</UserControl>
